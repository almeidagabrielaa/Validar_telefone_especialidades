import pandas as pd           # Manipula√ß√£o de dados e leitura de planilhas
import re                     # Express√µes regulares (valida√ß√£o e formata√ß√£o)
import glob                   # Busca por arquivos no diret√≥rio
import os                     # Opera√ß√µes do sistema operacional
import unicodedata            # Normaliza√ß√£o de caracteres especiais

# Fun√ß√£o para verificar se o nome √© v√°lido (apenas letras e espa√ßos)
def verificar_nome_valido(nome):
    try:
        if isinstance(nome, bytes):
            nome = nome.decode('utf-8')
    except UnicodeDecodeError:
        print(f"Erro de decodifica√ß√£o: {nome}")
        return False

    nome = unicodedata.normalize('NFKC', nome)
    nome_valido_regex = re.compile(r"^[A-Za-z√Ä-√ñ√ò-√∂√∏-√ø\s]+$")
    return bool(nome_valido_regex.match(nome))

# Fun√ß√£o para validar e formatar telefones (com DDDs espec√≠ficos e regras de repeti√ß√£o)
def validar_formatar_telefone(telefone):    
    if pd.isnull(telefone) or str(telefone).strip() == '':        
        return None    
    numeros = re.split(r'[;, ]+', str(telefone))  # Permite separar m√∫ltiplos n√∫meros
    for numero in numeros:        
        numero = re.sub(r'\D', '', numero)  # Remove caracteres n√£o num√©ricos      
        if not numero.startswith('55'):            
            numero = '55' + numero         # Adiciona DDI se faltar        
        numero_sem_ddi = numero[2:]        
        # Valida DDD e formato (s√≥ aceita celulares de DDDs definidos e com 9 d√≠gitos)
        if re.fullmatch(r'(82|71|73|74|75|77|85|88|98|99|83|81|87|86|89|84|79)\d{9}', numero_sem_ddi):            
            # Descarta n√∫meros com 4+ d√≠gitos iguais seguidos, aceita apenas se come√ßar com 7,8,9 ap√≥s DDD
            if not re.search(r'(\d)\1{3,}', numero_sem_ddi) and numero_sem_ddi[2] in ['7', '8', '9']:                
                return numero    
    return None

# Valida√ß√£o do whatsapp = telefone
def validar_formatar_whatsapp(whatsapp):
    return validar_formatar_telefone(whatsapp)

# Remove o DDI do n√∫mero para mostrar apenas o DDD+telefone
def remover_ddi(whatsapp):
    if pd.isnull(whatsapp):
        return None
    whatsapp = str(whatsapp)
    if whatsapp.startswith('55'):
        return whatsapp[2:]
    return whatsapp

# Valida√ß√£o de CNS (apenas 15 d√≠gitos)
def validar_cns(cns):
    if pd.isnull(cns):
        return None

    cns = str(cns)
    cns = re.sub(r'\D', '', cns)

    if not re.fullmatch(r'\d{15}', cns):
        return None
    return cns

# Corre√ß√µes de nomes conhecidos com caracteres errados
correcoes_nomes = {
    "Cristiana da Concei√ß?o": "Cristiana da Concei√ß√£o",
    "Ediv√¢nia Concei√ß?o Dos Santos": "Ediv√¢nia Concei√ß√£o Dos Santos",
    "N√≠vea de Lucena Brand?o": "N√≠vea de Lucena Brand√£o",
    "Valdinete Maria da Concei√ß?o Silva": "Valdinete Maria da Concei√ß√£o Silva",
    "CONCEI√á?O ELITA SILVA PINTO": "CONCEI√á√ÉO ELITA SILVA PINTO",
    "Andreia Rom?o da Silva": "Andreia Rom√£o da Silva",
    "Adriana da Concei√ß?o Cruz": "Adriana da Concei√ß√£o Cruz",
    "Ver?nica da Silva": "Ver√¥nica da Silva",
    "Claudiceia da Concei√ß?o Ramos": "Claudiceia da Concei√ß√£o Ramos",
    "Solange Guimar?es Dos Santos": "Solange Guimar√£es Dos Santos",
    "Maria Elenilda Fraz?o Bezerra": "Maria Elenilda Fraz√£o Bezerra"
}

# Fun√ß√£o principal que processa cada dataframe (cada aba ou arquivo CSV)
def processar_dataframe(df, arquivo, aba):
    try:
        print(f"üìÑ Processando: {arquivo} - Aba: {aba}")

        # Identifica nomes das colunas conforme varia√ß√µes poss√≠veis
        col_nome = 'Nome Paciente' if 'Nome Paciente' in df.columns else 'T√≠tulo'
        col_CNS = next((col for col in df.columns if 'CNS' in col), None)
        col_whatsapp = next((col for col in df.columns if 'Whatsapp' in col), None)        
        col_telefone = next((col for col in df.columns if 'telefone' in col), None)
        col_especialidade = next((col for col in df.columns if 'Especialidade' in col), None)

        # Checagem das colunas m√≠nimas esperadas
        if col_CNS is None or (col_whatsapp is None and col_telefone is None):
            print(f"‚ö†Ô∏è Uma ou mais colunas necess√°rias n√£o foram encontradas na aba {aba} do arquivo {arquivo}.")
            print(f"üîç Esperadas: ['T√≠tulo', 'CNS', 'Whatsapp ou Telefone']")
            print(f"üìã Encontradas: {list(df.columns)}")
            return

        # Corrige nomes problem√°ticos
        df[col_nome] = df[col_nome].replace(correcoes_nomes)

        # Verifica validade dos nomes
        df['Nome Paciente'] = df[col_nome].apply(lambda nome: verificar_nome_valido(unicodedata.normalize('NFKC', nome)))

        # Valida√ß√£o do CNS
        df['CNS'] = df[col_CNS].apply(validar_cns)

        # Valida√ß√£o e formata√ß√£o do Whatsapp
        df['Whatsapp'] = df[col_whatsapp].apply(validar_formatar_whatsapp)
        
        # Se Whatsapp inv√°lido, tenta usar o telefone
        if col_telefone is not None:
            linhas_invalidas = df['Whatsapp'].isnull()
            df.loc[linhas_invalidas, 'Whatsapp'] = df.loc[linhas_invalidas, col_telefone].apply(validar_formatar_telefone)

        # Cria coluna Whatsapp 2, sem o DDI
        df['Whatsapp 2'] = df['Whatsapp'].apply(remover_ddi)

        # Define as colunas de sa√≠da
        colunas_final = [col_nome, 'CNS', 'Whatsapp', 'Whatsapp 2']
        if col_especialidade:
            colunas_final.append(col_especialidade)

        # Filtra registros v√°lidos
        df_validos = df[
            df['CNS'].notnull() & 
            df['Whatsapp'].notnull()
        ][colunas_final].copy()

        # Ajusta nome das colunas na sa√≠da
        df_validos.columns = ['Nome Paciente', 'CNS', 'Whatsapp', 'Whatsapp 2', 'Especialidade'] if col_especialidade else ['Nome Paciente', 'CNS', 'Whatsapp', 'Whatsapp 2']

        # Seleciona registros inv√°lidos (CNS/Whatsapp ausentes ou nome inv√°lido)
        df_invalidos = df[
            (df['CNS'].isnull()) |     
            (df['Whatsapp'].isnull()) |    
            (~df['Nome Paciente'])
        ][colunas_final].copy()

        df_invalidos.columns = df_validos.columns

        # Salva arquivos CSV com os dados v√°lidos e inv√°lidos
        nome_base = arquivo.replace('.xlsx', '').replace('.csv', '')
        output_file_validos = f"{nome_base}_{aba}_validos.csv"
        df_validos.to_csv(output_file_validos, index=False, sep=';')

        print(f"‚úÖ Arquivo salvo (v√°lidos):\n - {output_file_validos}")

        if not df_invalidos.empty:
            output_file_invalidos = f"{nome_base}_{aba}_invalidos.csv"
            df_invalidos.to_csv(output_file_invalidos, index=False, sep=';')
            print(f"‚ö†Ô∏è Arquivo salvo (inv√°lidos):\n - {output_file_invalidos}")
        else:
            print("‚úÖ Nenhum registro inv√°lido encontrado.")

    except Exception as e:
        print(f"‚ùå Erro ao processar aba {aba} do arquivo {arquivo}: {e}")

# Processa cada arquivo .csv ou .xlsx no diret√≥rio
def processar_arquivo(arquivo):
    try:
        ext = os.path.splitext(arquivo)[1].lower()

        if ext == '.csv':
            df = pd.read_csv(arquivo, encoding='utf-8', delimiter=';', on_bad_lines='skip', dtype=str)
            processar_dataframe(df, arquivo, 'especialidade')
        elif ext == '.xlsx':
            sheets = pd.read_excel(arquivo, sheet_name=None, dtype=str)
            for aba, df in sheets.items():
                processar_dataframe(df, arquivo, aba)
        else:
            print(f"‚ùå Extens√£o n√£o suportada: {ext}")
    except Exception as e:
        print(f"‚ùå Erro ao processar o arquivo {arquivo}: {e}")

# Lista todos os arquivos .csv e .xlsx na pasta e executa o processamento
arquivos = glob.glob("*.csv") + glob.glob("*.xlsx")

for arquivo in arquivos:
    processar_arquivo(arquivo)
